/*! \page space_transform Overview of space transformations

Libsim allows to perform different space transformations on gridded
and sparse point datasets; transformations are available both at the
level of API library calls and within the command line utilities such
as \a vg6d_subarea, \a vg6d_transform, \a vg6d_getpoint, and \a
v7d_transform.

Transformations are defined at least by 2 parameters named \a type and
\a subtype. The transformations operate separately either on the
vertical or on the horizontal structure of the coordinate
system. Horizontal tranformations are divided into two main groups:
transformations conserving the input point structure and
transformations to an arbitrary grid or set of sparse points. Vertical
transformations are just vertical transformations for the moment.

\section structcons Transformations conserving the input grid structure

These transformations are grid-to-grid or sparse points-to-grid; the
output geographic projection or grid point coordinates is the same as
the input, and only a few parameters have to be specified.

\subsection zoom type=zoom

It is a grid-to-grid transformation, it generates a new grid by
cutting or extending (with missing values) the input grid, adding or
removing points on the four sides, without changing the geographical
reference system:

 - sub_type='coord' the corners of the zoomed/extended area are
   defined by geographical coordinates
 - sub_type='coordbb' the bounds of the zoomed/extended area are
   computed so to contain all the input points which lie in the
   provided lon/lat bounding box
 - sub_type='index' the bounds of the zoomed/extended area are
   defined by grid indices.

\subsection boxregrid type=boxregrid

It is a grid-to-grid transformation, it generates a new grid in which
the value at every point is the result of a function computed over \a
npx X \a npy points of the original grid, without changing the
geographical reference system:

 - sub_type='average' the function used is the average
 - sub_type='max' the function used is the maximum
 - sub_type='min' the function used is the minimum.

\subsection metamorphosis type=metamorphosis

When the metamorphosis transformation type is applied, the output
points and values are the same as the input ones, but the data
structure is changed from grid to sparse points, so it is only a
grid-to-sparse points transformation:

 - sub_type='all' all the input points are kept in the output
 - sub_type='coordbb' the input points which lie in the provided
   lon/lat bounding box are kept in the output.

\section arbtrans Transformations to an arbitrary grid or set of sparse points

These transformations produce, in output, data on an arbitrary grid or
set of sparse points, thus a full description of the output grid or a
list of output points have to be provided.

\subsection inter type=inter

This transformation interpolates the input data on a new set of
points, the input and output datasets can be either of grid type or of
sparse data type, but not all the combinations make sense for all the
subtypes:

 - sub_type='near' the interpolated value is that of the nearest
   input point (grid-to-grid, grid-to-sparse points)

\image html trans_inter_near.png

 - sub_type='bilin' the interpolated value is computed as a
   bilinear interpolation of the 4 surrounding input points
   (grid-to-grid, grid-to-sparse points)

\image html trans_inter_bilinear.png

 - sub_type='linear' the interpolated value is computed as a
   linear interpolation of the 3 surrounding input points
   individuated by means of a triangulation procedure (sparse
   points-to-grid, sparse points-to-sparse points).

\image html trans_inter_linear.png

\subsection boxinter type=boxinter

The boxinter type is suitable both for grid-to-grid and sparse
points-to-grid transformations and it computes data on a new grid in
which the value at every point is the result of a function computed
over those input points that lie inside the output point's grid box:

\image html trans_boxinter.png

 - sub_type='average' the function used is the average
 - sub_type='max' the function used is the maximum
 - sub_type='min' the function used is the minimum
 - sub_type='percentile' the function used is a requested percentile
   of the input points distribution, the percentile value, in the
   interval [0,100] has to be additionally provided.

\subsection polyinter type=polyinter

The polyinter type is suitable both for grid-to-sparse points and
sparse points-to-sparse points transformations and it computes data on
a new set of points in which the value at every point is the result of
a function computed over those input points that lie inside an
arbitrary georoferenced polygon; the output point coordinates are
defined as the centroids of the polygons:

\image html trans_polyinter.png

 - sub_type='average' the function used is the average
 - sub_type='max' the function used is the maximum
 - sub_type='min' the function used is the minimum
 - sub_type='percentile' the function used is a requested percentile
   of the input points distribution, the percentile value, in the
   interval [0,100] has to be additionally provided.

\section verttrans Vertical transformations

Vertical levels and layers are specified in analogy with grib2 coding
by means of one or two surfaces with type of coordinate specified as
in the following table:

|level code|type of level and unit|associated variable and unit|
|----------|----------------------|----------------------------|
| 20  | isothermal level (K) | B12101 (K)|
| 100 | isobaric level (Pa) | B10004 (Pa)|
| 102 | height over sea level (mm) | B10007 (m)|
| 103 | height over surface (mm) | B10007 (m) + surface orography|
| 104 | sigma level (nondimensional)| - |
| 105 | hybrid level (nondimensional)| - |
| 106 | depth below land surface (mm)| - |
| 107 | isentropical (K) | B12192 (K)|
| 108 | level at specified pressure difference from ground to level (Pa)| - |

Only the vertical levels having an associated B table variable are
fully supported as output target level of vertical interpolations in
libsim, the other ones are only supported as input levels for vertical
interpolations when accompanied by a variable specifying the vertical
coordinate of the input levels, or for transformations between the
same type of vertical coordinates.

\subsection verteq Vertical interpolation between the same type of coordinates

This is a simple special case, where there is no need to specify the
vertical output coordinate in the input system, but only the list of
ouput levels. The following example shows hot to interpolate data on
isobaric surfaces to a different set of isobaric surfaces:

\code

vg6d_transform --trans-type=vertint --sub-type=linear \
 --trans-level-type=100,,100, --trans-level-list=85000,92500 \
 input_isobaric.grib output_isobaric.grib

\endcode

Notice that vertical interpolations where pressure is the vertical
coordinate are computed linearly in the logarithm of pressure.

It is also possible to from layers between two levels of equal type to
levels and vice-versa, with the simplification that the coordinate
associated to a layer is the average of the coordinates of the levels
above and below (log-average for pressure levels).

In the case of hybrid levels, where the vertical coordinate is an
integer index, the list of output levels can be automatically
generated if not provided. This example shows how to extract vertical
coordinate information from COSMO model output for interpolating data
on native model level/layers:

\code
# extract height of model levels from constant file
grib_copy -w typeOfLevel=hybrid,shortName=h lfff00000000c hyblevcoord.grib
# interpolate height of hybrid levels to hybrid layers, here automatic
# generation of level list takes place; --component-flag=1 is needed,
# but it is too complicate to explain here why
vg6d_transform --trans-type=vertint --sub-type=linear \
 --trans-level-type=105,,105,105 --component-flag=1 \
 hyblevcoord.grib hyblaycoord.grib

# extract level corresponding to surface (=orography), needed for
# interpolation to level type 103, assume we have 45 vertical layers
grib_copy -w shortName=h,level=46 lfff00000000c tmpgrib
grib_set -s typeOfLevel=surface,level=0  tmpgrib surfh.grib

# append height of surface orography to the coordinate files for use
# with output type of level 103
cat hyblevcoord.grib surfh.grib > hyblevcoord_surf.grib
cat hyblaycoord.grib surfh.grib > hyblaycoord_surf.grib

\endcode

\subsection vertdiff Vertical interpolation to a different type of coordinate

When the vertical corodinate system is different in input and in
output, the coordinates of each input point in terms of the output
coordinate system has to be specified.

This can be done either through an external coordinate file or by
taking the coordinate from the input dataset. The first case is
suitable when output coordinates expressed in the input coordinate
system are constant in time, while the second is suitable for output
coordinates that vary with time. In both cases, the variable
expressing the coordinate value must be defined on the same input
levels as the data to be interpolated and must have a parameter
matching the one in the above table.

The following example shows how to interpolate gridded data from input
hybrid coordinate system (code 105) to height system (code 102) by
externally providing the coordinate of all the input levels in the
output coordinate system (height):

\code
# filter data on hybrid layers
grib_copy -w typeOfLevel=hybridLayer lfff00000000 lfff00000000_layer.grib
# when wind components and staggered grid are involved I may need a
# preliminary destaggering/unrotation step
vg6d_transform --a-grid \
 lfff00000000_layer.grib lfff00000000_layer_destag_unrot.grib
# interpolate to levels at a height over sea level
# using coordinate file produced in the previous example
vg6d_transform --trans-type=vertint --sub-type=linear \
 --trans-level-type=105,105,102, \
 --trans-level-list=100000,200000,300000,400000 \
 --coord-file=hyblaycoord.grib --coord-format=grib_api \
 lfff00000000_layer_destag_unrot.grib lfff00000000z1.grib

# filter data on hybrid levels
grib_copy -w typeOfLevel=hybrid lfff00000000 lfff00000000_level.grib
# interpolate to levels at a height over sea level
# using coordinate file produced in the previous example
vg6d_transform --trans-type=vertint --sub-type=linear \
 --trans-level-type=105,,102, \
 --trans-level-list=100000,200000,300000,400000 \
 --coord-file=hyblevcoord.grib --coord-format=grib_api \
 lfff00000000_level.grib lfff00000000z2.grib
\endcode

If height over surface (103) is desired instead of height over sea
level, then \c 102 has to be replaced with \c 103 and the coordinate
files containing also surface orography \c hyblevcoord_surf.grib and
\c hyblaycoord_surf.grib produced in the previous example shoud be
used in place of \c hyblevcoord.grib and \c hyblaycoord.grib.

The following example shows how to interpolate gridded data from input
hybrid coordinate system to pressure system, assuming that the
time-varying pressure field on the input model layers is included in
the input dataset:

\code
vg6d_transform --trans-type=vertint --sub-type=linear \
 --trans-level-type=105,,100, \
 --trans-level-list=50000,85000,92500 \
 lfff00000000 lfff00000000p.grib
\endcode

For completeness, also the pressure field in this case will be
contained in the output file although it will be constant within
numerical precision on the output levels.

*/
